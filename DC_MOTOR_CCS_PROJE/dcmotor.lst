CCS PCM C Compiler, Version 5.015, 5967               24-Oca-22 11:26

               Filename:   C:\Users\User\Desktop\DENEYLER\ccs cs\DC_MOTOR_CCS_PROJE\dcmotor.lst

               ROM used:   597 words (7%)
                           Largest free fragment is 2048
               RAM used:   25 (7%) at main() level
                           38 (10%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   223
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... /* 
....................    EMRE MALTAS(Þ) Biyomedikal Muhendisligi 4. Sinif Ögrencisi   
.................... */ 
....................  
....................  
.................... #include<16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
018D:  MOVLW  10
018E:  MOVWF  3E
018F:  CLRF   77
0190:  CLRF   7A
0191:  RRF    3B,F
0192:  RRF    3A,F
0193:  BTFSS  03.0
0194:  GOTO   19B
0195:  MOVF   3C,W
0196:  ADDWF  77,F
0197:  BTFSC  03.0
0198:  INCF   7A,F
0199:  MOVF   3D,W
019A:  ADDWF  7A,F
019B:  RRF    7A,F
019C:  RRF    77,F
019D:  RRF    79,F
019E:  RRF    78,F
019F:  DECFSZ 3E,F
01A0:  GOTO   191
*
01AC:  CLRF   78
01AD:  CLRF   79
01AE:  CLRF   77
01AF:  CLRF   7A
01B0:  MOVF   3F,W
01B1:  BTFSS  03.2
01B2:  GOTO   1B6
01B3:  MOVF   3E,W
01B4:  BTFSC  03.2
01B5:  GOTO   1D0
01B6:  MOVLW  10
01B7:  MOVWF  40
01B8:  BCF    03.0
01B9:  RLF    3C,F
01BA:  RLF    3D,F
01BB:  RLF    77,F
01BC:  RLF    7A,F
01BD:  MOVF   3F,W
01BE:  SUBWF  7A,W
01BF:  BTFSS  03.2
01C0:  GOTO   1C3
01C1:  MOVF   3E,W
01C2:  SUBWF  77,W
01C3:  BTFSS  03.0
01C4:  GOTO   1CC
01C5:  MOVF   3E,W
01C6:  SUBWF  77,F
01C7:  BTFSS  03.0
01C8:  DECF   7A,F
01C9:  MOVF   3F,W
01CA:  SUBWF  7A,F
01CB:  BSF    03.0
01CC:  RLF    78,F
01CD:  RLF    79,F
01CE:  DECFSZ 40,F
01CF:  GOTO   1B8
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(clock=4000000) 
*
0084:  MOVLW  36
0085:  MOVWF  04
0086:  BCF    03.7
0087:  MOVF   00,W
0088:  BTFSC  03.2
0089:  GOTO   098
008A:  MOVLW  01
008B:  MOVWF  78
008C:  CLRF   77
008D:  DECFSZ 77,F
008E:  GOTO   08D
008F:  DECFSZ 78,F
0090:  GOTO   08C
0091:  MOVLW  4A
0092:  MOVWF  77
0093:  DECFSZ 77,F
0094:  GOTO   093
0095:  GOTO   096
0096:  DECFSZ 00,F
0097:  GOTO   08A
0098:  RETURN
.................... #fuses XT,NOLVP,NODEBUG,NOPROTECT,NOWDT,NOBROWNOUT,NOCPD 
....................  
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
....................  
....................  
.................... int disp[10]={0XBF,0X06,0X5B,0X4F,0X66,0X6D,0XFD,0X07,0XFF,0X6F}; 
*
0231:  MOVLW  BF
0232:  BCF    03.5
0233:  MOVWF  27
0234:  MOVLW  06
0235:  MOVWF  28
0236:  MOVLW  5B
0237:  MOVWF  29
0238:  MOVLW  4F
0239:  MOVWF  2A
023A:  MOVLW  66
023B:  MOVWF  2B
023C:  MOVLW  6D
023D:  MOVWF  2C
023E:  MOVLW  FD
023F:  MOVWF  2D
0240:  MOVLW  07
0241:  MOVWF  2E
0242:  MOVLW  FF
0243:  MOVWF  2F
0244:  MOVLW  6F
0245:  MOVWF  30
.................... unsigned long int adc_degeri=0; 
.................... int sag_sol_durum=0;    // durmus=0     sag =1  sol = 2 
....................  
....................  
.................... void baslangic_ayarlari() 
.................... { 
....................    setup_psp(PSP_DISABLED); 
*
0043:  BSF    03.5
0044:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
0045:  BCF    03.5
0046:  CLRF   10
....................     
....................    setup_adc(ADC_CLOCK_DIV_32); 
0047:  BSF    03.5
0048:  BCF    1F.6
0049:  BCF    03.5
004A:  BCF    1F.6
004B:  BSF    1F.7
004C:  BSF    03.5
004D:  BSF    1F.7
004E:  BCF    03.5
004F:  BSF    1F.0
....................    setup_adc_ports(AN0); 
0050:  BSF    03.5
0051:  BCF    1F.0
0052:  BSF    1F.1
0053:  BSF    1F.2
0054:  BSF    1F.3
....................     
....................    setup_timer_2(T2_DIV_BY_16,255,1); 
0055:  MOVLW  00
0056:  MOVWF  78
0057:  IORLW  06
0058:  BCF    03.5
0059:  MOVWF  12
005A:  MOVLW  FF
005B:  BSF    03.5
005C:  MOVWF  12
....................    set_timer2(0); 
005D:  BCF    03.5
005E:  CLRF   11
....................     
....................    setup_CCP1(CCP_PWM); 
005F:  BCF    07.2
0060:  MOVLW  0C
0061:  MOVWF  17
....................    setup_CCP2(CCP_PWM); 
0062:  BCF    07.1
0063:  MOVWF  1D
....................     
....................    setup_timer_0(RTCC_DIV_1 | RTCC_EXT_H_TO_L); 
0064:  BSF    03.5
0065:  MOVF   01,W
0066:  ANDLW  C7
0067:  IORLW  38
0068:  MOVWF  01
....................    set_timer0(255); 
0069:  MOVLW  FF
006A:  BCF    03.5
006B:  MOVWF  01
....................     
....................     
....................    set_tris_a(0x15);    output_a(0x00); 
006C:  MOVLW  15
006D:  BSF    03.5
006E:  MOVWF  05
006F:  BCF    03.5
0070:  CLRF   05
....................    set_tris_b(0x00);    output_b(0x00); 
0071:  MOVLW  00
0072:  BSF    03.5
0073:  MOVWF  06
0074:  BCF    03.5
0075:  CLRF   06
....................    set_tris_c(0x00);    output_c(0x00); 
0076:  BSF    03.5
0077:  MOVWF  07
0078:  BCF    03.5
0079:  CLRF   07
....................    set_tris_d(0x00);    output_d(0x00); 
007A:  BSF    03.5
007B:  MOVWF  08
007C:  BCF    03.5
007D:  CLRF   08
....................     
....................    enable_interrupts(INT_TIMER0); 
007E:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
007F:  MOVLW  C0
0080:  IORWF  0B,F
0081:  BCF    0A.3
0082:  BCF    0A.4
0083:  GOTO   247 (RETURN)
.................... } 
....................  
.................... void saga_kayan_isik() 
*
01E7:  MOVLW  0F
01E8:  MOVWF  34
.................... { 
....................    int durum=0X0F; 
....................      for(int i=0;i<=4;i++) 
01E9:  CLRF   35
01EA:  MOVF   35,W
01EB:  SUBLW  04
01EC:  BTFSS  03.0
01ED:  GOTO   1F7
....................      { 
....................           output_d(durum); 
01EE:  MOVF   34,W
01EF:  MOVWF  08
....................           durum=durum<<1; 
01F0:  BCF    03.0
01F1:  RLF    34,F
....................           delay_ms(80); 
01F2:  MOVLW  50
01F3:  MOVWF  36
01F4:  CALL   084
01F5:  INCF   35,F
01F6:  GOTO   1EA
....................      } 
.................... } 
....................  
.................... void sola_kayan_isik() 
*
0208:  MOVLW  0F
0209:  MOVWF  34
.................... { 
....................        int durum=0x0F; 
....................        output_d(durum);   delay_ms(80); 
020A:  MOVF   34,W
020B:  MOVWF  08
020C:  MOVLW  50
020D:  MOVWF  36
020E:  CALL   084
....................        for(int i=0;i<=4;i++) 
020F:  CLRF   35
0210:  MOVF   35,W
0211:  SUBLW  04
0212:  BTFSS  03.0
0213:  GOTO   21D
....................        { 
....................          output_d(durum); 
0214:  MOVF   34,W
0215:  MOVWF  08
....................          durum=durum>>1; 
0216:  BCF    03.0
0217:  RRF    34,F
....................          delay_ms(80); 
0218:  MOVLW  50
0219:  MOVWF  36
021A:  CALL   084
021B:  INCF   35,F
021C:  GOTO   210
....................        } 
.................... } 
....................  
....................  
.................... void adc_araligi() 
.................... { 
....................     if(adc_degeri>=0 && adc_degeri<100)               { output_b(disp[0]); } 
*
00AD:  MOVF   32,F
00AE:  BTFSS  03.2
00AF:  GOTO   0B7
00B0:  MOVF   31,W
00B1:  SUBLW  63
00B2:  BTFSS  03.0
00B3:  GOTO   0B7
00B4:  MOVF   27,W
00B5:  MOVWF  06
00B6:  GOTO   183
....................     else if(adc_degeri >=100 && adc_degeri<200)       { output_b(disp[1]); } 
00B7:  MOVF   32,F
00B8:  BTFSS  03.2
00B9:  GOTO   0BE
00BA:  MOVF   31,W
00BB:  SUBLW  63
00BC:  BTFSC  03.0
00BD:  GOTO   0C8
00BE:  MOVF   32,F
00BF:  BTFSS  03.2
00C0:  GOTO   0C8
00C1:  MOVF   31,W
00C2:  SUBLW  C7
00C3:  BTFSS  03.0
00C4:  GOTO   0C8
00C5:  MOVF   28,W
00C6:  MOVWF  06
00C7:  GOTO   183
....................     else if(adc_degeri >=200 && adc_degeri<300)       { output_b(disp[2]); } 
00C8:  MOVF   32,F
00C9:  BTFSS  03.2
00CA:  GOTO   0CF
00CB:  MOVF   31,W
00CC:  SUBLW  C7
00CD:  BTFSC  03.0
00CE:  GOTO   0DC
00CF:  MOVF   32,W
00D0:  SUBLW  01
00D1:  BTFSS  03.0
00D2:  GOTO   0DC
00D3:  BTFSS  03.2
00D4:  GOTO   0D9
00D5:  MOVF   31,W
00D6:  SUBLW  2B
00D7:  BTFSS  03.0
00D8:  GOTO   0DC
00D9:  MOVF   29,W
00DA:  MOVWF  06
00DB:  GOTO   183
....................     else if(adc_degeri >=300 && adc_degeri<400)       { output_b(disp[3]); } 
00DC:  MOVF   32,W
00DD:  SUBLW  00
00DE:  BTFSC  03.0
00DF:  GOTO   0F4
00E0:  XORLW  FF
00E1:  BTFSS  03.2
00E2:  GOTO   0E7
00E3:  MOVF   31,W
00E4:  SUBLW  2B
00E5:  BTFSC  03.0
00E6:  GOTO   0F4
00E7:  MOVF   32,W
00E8:  SUBLW  01
00E9:  BTFSS  03.0
00EA:  GOTO   0F4
00EB:  BTFSS  03.2
00EC:  GOTO   0F1
00ED:  MOVF   31,W
00EE:  SUBLW  8F
00EF:  BTFSS  03.0
00F0:  GOTO   0F4
00F1:  MOVF   2A,W
00F2:  MOVWF  06
00F3:  GOTO   183
....................     else if(adc_degeri >=400 && adc_degeri<500)       { output_b(disp[4]); } 
00F4:  MOVF   32,W
00F5:  SUBLW  00
00F6:  BTFSC  03.0
00F7:  GOTO   10C
00F8:  XORLW  FF
00F9:  BTFSS  03.2
00FA:  GOTO   0FF
00FB:  MOVF   31,W
00FC:  SUBLW  8F
00FD:  BTFSC  03.0
00FE:  GOTO   10C
00FF:  MOVF   32,W
0100:  SUBLW  01
0101:  BTFSS  03.0
0102:  GOTO   10C
0103:  BTFSS  03.2
0104:  GOTO   109
0105:  MOVF   31,W
0106:  SUBLW  F3
0107:  BTFSS  03.0
0108:  GOTO   10C
0109:  MOVF   2B,W
010A:  MOVWF  06
010B:  GOTO   183
....................     else if(adc_degeri >=500 && adc_degeri<600)       { output_b(disp[5]); } 
010C:  MOVF   32,W
010D:  SUBLW  00
010E:  BTFSC  03.0
010F:  GOTO   124
0110:  XORLW  FF
0111:  BTFSS  03.2
0112:  GOTO   117
0113:  MOVF   31,W
0114:  SUBLW  F3
0115:  BTFSC  03.0
0116:  GOTO   124
0117:  MOVF   32,W
0118:  SUBLW  02
0119:  BTFSS  03.0
011A:  GOTO   124
011B:  BTFSS  03.2
011C:  GOTO   121
011D:  MOVF   31,W
011E:  SUBLW  57
011F:  BTFSS  03.0
0120:  GOTO   124
0121:  MOVF   2C,W
0122:  MOVWF  06
0123:  GOTO   183
....................     else if(adc_degeri >=600 && adc_degeri<700)       { output_b(disp[6]); } 
0124:  MOVF   32,W
0125:  SUBLW  01
0126:  BTFSC  03.0
0127:  GOTO   13C
0128:  XORLW  FF
0129:  BTFSS  03.2
012A:  GOTO   12F
012B:  MOVF   31,W
012C:  SUBLW  57
012D:  BTFSC  03.0
012E:  GOTO   13C
012F:  MOVF   32,W
0130:  SUBLW  02
0131:  BTFSS  03.0
0132:  GOTO   13C
0133:  BTFSS  03.2
0134:  GOTO   139
0135:  MOVF   31,W
0136:  SUBLW  BB
0137:  BTFSS  03.0
0138:  GOTO   13C
0139:  MOVF   2D,W
013A:  MOVWF  06
013B:  GOTO   183
....................     else if(adc_degeri >=700 && adc_degeri<800)       { output_b(disp[7]); } 
013C:  MOVF   32,W
013D:  SUBLW  01
013E:  BTFSC  03.0
013F:  GOTO   154
0140:  XORLW  FF
0141:  BTFSS  03.2
0142:  GOTO   147
0143:  MOVF   31,W
0144:  SUBLW  BB
0145:  BTFSC  03.0
0146:  GOTO   154
0147:  MOVF   32,W
0148:  SUBLW  03
0149:  BTFSS  03.0
014A:  GOTO   154
014B:  BTFSS  03.2
014C:  GOTO   151
014D:  MOVF   31,W
014E:  SUBLW  1F
014F:  BTFSS  03.0
0150:  GOTO   154
0151:  MOVF   2E,W
0152:  MOVWF  06
0153:  GOTO   183
....................     else if(adc_degeri >=800 && adc_degeri<900)       { output_b(disp[8]); } 
0154:  MOVF   32,W
0155:  SUBLW  02
0156:  BTFSC  03.0
0157:  GOTO   16C
0158:  XORLW  FF
0159:  BTFSS  03.2
015A:  GOTO   15F
015B:  MOVF   31,W
015C:  SUBLW  1F
015D:  BTFSC  03.0
015E:  GOTO   16C
015F:  MOVF   32,W
0160:  SUBLW  03
0161:  BTFSS  03.0
0162:  GOTO   16C
0163:  BTFSS  03.2
0164:  GOTO   169
0165:  MOVF   31,W
0166:  SUBLW  83
0167:  BTFSS  03.0
0168:  GOTO   16C
0169:  MOVF   2F,W
016A:  MOVWF  06
016B:  GOTO   183
....................     else if(adc_degeri >=900 && adc_degeri<1023)      { output_b(disp[9]); } 
016C:  MOVF   32,W
016D:  SUBLW  02
016E:  BTFSC  03.0
016F:  GOTO   183
0170:  XORLW  FF
0171:  BTFSS  03.2
0172:  GOTO   177
0173:  MOVF   31,W
0174:  SUBLW  83
0175:  BTFSC  03.0
0176:  GOTO   183
0177:  MOVF   32,W
0178:  SUBLW  03
0179:  BTFSS  03.0
017A:  GOTO   183
017B:  BTFSS  03.2
017C:  GOTO   181
017D:  MOVF   31,W
017E:  SUBLW  FE
017F:  BTFSS  03.0
0180:  GOTO   183
0181:  MOVF   30,W
0182:  MOVWF  06
....................   
.................... } 
.................... void adc_oku() 
.................... { 
....................    set_adc_channel(0); 
*
0099:  MOVLW  00
009A:  MOVWF  78
009B:  MOVF   1F,W
009C:  ANDLW  C7
009D:  IORWF  78,W
009E:  MOVWF  1F
....................    delay_us(20); 
009F:  MOVLW  06
00A0:  MOVWF  77
00A1:  DECFSZ 77,F
00A2:  GOTO   0A1
00A3:  NOP
....................    adc_degeri = read_adc(); 
00A4:  BSF    1F.2
00A5:  BTFSC  1F.2
00A6:  GOTO   0A5
00A7:  BSF    03.5
00A8:  MOVF   1E,W
00A9:  BCF    03.5
00AA:  MOVWF  31
00AB:  MOVF   1E,W
00AC:  MOVWF  32
....................    adc_araligi(); 
*
0183:  BCF    0A.3
0184:  BCF    0A.4
0185:  GOTO   252 (RETURN)
.................... } 
....................  
.................... unsigned int map(unsigned long int A,int B ,int C,int D,int E) 
.................... { 
....................    return (A*E)/C; 
0186:  MOVF   35,W
0187:  MOVWF  3B
0188:  MOVF   34,W
0189:  MOVWF  3A
018A:  CLRF   3D
018B:  MOVF   39,W
018C:  MOVWF  3C
*
01A1:  MOVF   79,W
01A2:  MOVWF  3B
01A3:  MOVF   78,W
01A4:  MOVWF  3A
01A5:  MOVF   3B,W
01A6:  MOVWF  3D
01A7:  MOVF   3A,W
01A8:  MOVWF  3C
01A9:  CLRF   3F
01AA:  MOVF   37,W
01AB:  MOVWF  3E
*
01D0:  MOVF   78,W
01D1:  RETURN
.................... } 
.................... void motor_sur() 
.................... { 
....................       switch(sag_sol_durum) 
01D2:  MOVF   33,W
01D3:  XORLW  01
01D4:  BTFSC  03.2
01D5:  GOTO   1DA
01D6:  XORLW  03
01D7:  BTFSC  03.2
01D8:  GOTO   1FB
01D9:  GOTO   220
....................       {     
....................          case 1: 
....................          set_pwm2_duty(map(adc_degeri,0,1023,0,255)); 
01DA:  MOVF   32,W
01DB:  MOVWF  35
01DC:  MOVF   31,W
01DD:  MOVWF  34
01DE:  CLRF   36
01DF:  MOVLW  FF
01E0:  MOVWF  37
01E1:  CLRF   38
01E2:  MOVWF  39
01E3:  CALL   186
01E4:  MOVF   78,W
01E5:  MOVWF  1B
....................          set_pwm1_duty(0); 
01E6:  CLRF   15
....................          saga_kayan_isik(); 
....................          delay_ms(5); 
*
01F7:  MOVLW  05
01F8:  MOVWF  36
01F9:  CALL   084
....................          break; 
01FA:  GOTO   220
....................           
....................          case 2: 
....................          set_pwm2_duty(0); 
01FB:  CLRF   1B
....................          set_pwm1_duty(map(adc_degeri,0,1023,0,255)); 
01FC:  MOVF   32,W
01FD:  MOVWF  35
01FE:  MOVF   31,W
01FF:  MOVWF  34
0200:  CLRF   36
0201:  MOVLW  FF
0202:  MOVWF  37
0203:  CLRF   38
0204:  MOVWF  39
0205:  CALL   186
0206:  MOVF   78,W
0207:  MOVWF  15
....................          sola_kayan_isik(); 
....................          delay_ms(5); 
*
021D:  MOVLW  05
021E:  MOVWF  36
021F:  CALL   084
....................          break; 
....................              
....................       } 
0220:  BCF    0A.3
0221:  BCF    0A.4
0222:  GOTO   253 (RETURN)
.................... } 
....................  
.................... #INT_TIMER0 
.................... void timer0_kesmesi() 
.................... { 
....................     set_timer0(255); 
*
002F:  MOVLW  FF
0030:  MOVWF  01
....................     if(sag_sol_durum == 1) {  sag_sol_durum = 2; } 
0031:  DECFSZ 33,W
0032:  GOTO   036
0033:  MOVLW  02
0034:  MOVWF  33
0035:  GOTO   03F
....................     else if(sag_sol_durum == 2) {  sag_sol_durum = 1;} 
0036:  MOVF   33,W
0037:  SUBLW  02
0038:  BTFSS  03.2
0039:  GOTO   03D
003A:  MOVLW  01
003B:  MOVWF  33
003C:  GOTO   03F
....................     else { sag_sol_durum = 1;  }        
003D:  MOVLW  01
003E:  MOVWF  33
003F:  BCF    0B.2
0040:  BCF    0A.3
0041:  BCF    0A.4
0042:  GOTO   01B
.................... } 
....................  
.................... void main() 
*
0223:  MOVF   03,W
0224:  ANDLW  1F
0225:  MOVWF  03
0226:  CLRF   32
0227:  CLRF   31
0228:  CLRF   33
0229:  BSF    03.5
022A:  BSF    1F.0
022B:  BSF    1F.1
022C:  BSF    1F.2
022D:  BCF    1F.3
022E:  MOVLW  07
022F:  MOVWF  1C
0230:  BCF    03.7
.................... { 
....................    baslangic_ayarlari(); 
*
0246:  GOTO   043
....................     
....................    while(true) 
....................    { 
....................         
....................        if(input(pin_a2)) 
0247:  BTFSS  05.2
0248:  GOTO   251
....................        { 
....................             delay_ms(20); 
0249:  MOVLW  14
024A:  MOVWF  36
024B:  CALL   084
....................             set_pwm1_duty(0); 
024C:  CLRF   15
....................             set_pwm2_duty(0); 
024D:  CLRF   1B
....................             sag_sol_durum = 0;  
024E:  CLRF   33
....................             while(input(pin_a2)); 
024F:  BTFSC  05.2
0250:  GOTO   24F
....................        } 
....................        adc_oku(); 
0251:  GOTO   099
....................        motor_sur(); 
0252:  GOTO   1D2
0253:  GOTO   247
....................         
....................    } 
.................... } 
0254:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
